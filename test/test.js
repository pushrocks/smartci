/// <reference path="../ts/typings/main.d.ts" />
var smartci = require("../dist/index.js");
var should = require("should");
process.env.TRAVIS_JOB_NUMBER = "180.3";
process.env.TRAVIS_TAG = "";
process.env.CI = "true";
describe("smartci", function () {
    describe("check", function () {
        describe(".isCi", function () {
            it("should state if we are in a CI environment", function () {
                smartci.check.isCi().should.be.true();
                process.env.CI = "false";
                smartci.check.isCi().should.be.false();
            });
        });
        describe(".isTaggedCommit", function () {
            it("should state if we are dealing with a tagged commit", function () {
                smartci.check.isTaggedCommit().should.be.false();
                process.env.TRAVIS_TAG = "v0.3.1";
                smartci.check.isTaggedCommit().should.be.true();
            });
        });
    });
    describe("get", function () {
        describe(".jobNumberString", function () {
            it("should get the correct job number", function () {
                smartci.get.jobNumberString().should.equal("180.3");
            });
        });
        describe(".mainJobNumber", function () {
            it("should get the correct main job number", function () {
                smartci.get.mainJobNumber().should.equal(180);
            });
        });
        describe(".subJobNumber", function () {
            it("should get the correct sub job number", function () {
                smartci.get.subJobNumber().should.equal(3);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBQ2hELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzFDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUvQixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQztBQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDO0FBRXhCLFFBQVEsQ0FBQyxTQUFTLEVBQUM7SUFDZixRQUFRLENBQUMsT0FBTyxFQUFDO1FBQ2IsUUFBUSxDQUFDLE9BQU8sRUFBQztZQUNiLEVBQUUsQ0FBQyw0Q0FBNEMsRUFBQztnQkFDNUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUM7Z0JBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMzQyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ0gsUUFBUSxDQUFDLGlCQUFpQixFQUFDO1lBQ3ZCLEVBQUUsQ0FBQyxxREFBcUQsRUFBQztnQkFDckQsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwRCxDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsS0FBSyxFQUFDO1FBQ1gsUUFBUSxDQUFDLGtCQUFrQixFQUFDO1lBQ3hCLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBQztnQkFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDSCxRQUFRLENBQUMsZ0JBQWdCLEVBQUM7WUFDdEIsRUFBRSxDQUFDLHdDQUF3QyxFQUFDO2dCQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEQsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQztRQUNILFFBQVEsQ0FBQyxlQUFlLEVBQUM7WUFDckIsRUFBRSxDQUFDLHVDQUF1QyxFQUFDO2dCQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90cy90eXBpbmdzL21haW4uZC50c1wiIC8+XG52YXIgc21hcnRjaSA9IHJlcXVpcmUoXCIuLi9kaXN0L2luZGV4LmpzXCIpO1xudmFyIHNob3VsZCA9IHJlcXVpcmUoXCJzaG91bGRcIik7XG5cbnByb2Nlc3MuZW52LlRSQVZJU19KT0JfTlVNQkVSID0gXCIxODAuM1wiO1xucHJvY2Vzcy5lbnYuVFJBVklTX1RBRyA9IFwiXCI7XG5wcm9jZXNzLmVudi5DSSA9IFwidHJ1ZVwiO1xuXG5kZXNjcmliZShcInNtYXJ0Y2lcIixmdW5jdGlvbigpe1xuICAgIGRlc2NyaWJlKFwiY2hlY2tcIixmdW5jdGlvbigpe1xuICAgICAgICBkZXNjcmliZShcIi5pc0NpXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGl0KFwic2hvdWxkIHN0YXRlIGlmIHdlIGFyZSBpbiBhIENJIGVudmlyb25tZW50XCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzbWFydGNpLmNoZWNrLmlzQ2koKS5zaG91bGQuYmUudHJ1ZSgpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkNJID0gXCJmYWxzZVwiO1xuICAgICAgICAgICAgICAgIHNtYXJ0Y2kuY2hlY2suaXNDaSgpLnNob3VsZC5iZS5mYWxzZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkZXNjcmliZShcIi5pc1RhZ2dlZENvbW1pdFwiLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpdChcInNob3VsZCBzdGF0ZSBpZiB3ZSBhcmUgZGVhbGluZyB3aXRoIGEgdGFnZ2VkIGNvbW1pdFwiLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc21hcnRjaS5jaGVjay5pc1RhZ2dlZENvbW1pdCgpLnNob3VsZC5iZS5mYWxzZSgpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LlRSQVZJU19UQUcgPSBcInYwLjMuMVwiO1xuICAgICAgICAgICAgICAgIHNtYXJ0Y2kuY2hlY2suaXNUYWdnZWRDb21taXQoKS5zaG91bGQuYmUudHJ1ZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoXCJnZXRcIixmdW5jdGlvbigpe1xuICAgICAgICBkZXNjcmliZShcIi5qb2JOdW1iZXJTdHJpbmdcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgaXQoXCJzaG91bGQgZ2V0IHRoZSBjb3JyZWN0IGpvYiBudW1iZXJcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHNtYXJ0Y2kuZ2V0LmpvYk51bWJlclN0cmluZygpLnNob3VsZC5lcXVhbChcIjE4MC4zXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkZXNjcmliZShcIi5tYWluSm9iTnVtYmVyXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGdldCB0aGUgY29ycmVjdCBtYWluIGpvYiBudW1iZXJcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHNtYXJ0Y2kuZ2V0Lm1haW5Kb2JOdW1iZXIoKS5zaG91bGQuZXF1YWwoMTgwKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBkZXNjcmliZShcIi5zdWJKb2JOdW1iZXJcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgaXQoXCJzaG91bGQgZ2V0IHRoZSBjb3JyZWN0IHN1YiBqb2IgbnVtYmVyXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzbWFydGNpLmdldC5zdWJKb2JOdW1iZXIoKS5zaG91bGQuZXF1YWwoMyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9KTtcblxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
